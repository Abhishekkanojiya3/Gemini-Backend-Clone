generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String?       @db.VarChar(255)
  email        String?       @unique
  phone        String        @unique @db.VarChar(20)
  passwordHash String        @db.VarChar(255)
  subscription Subscription?
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)

  chatrooms  Chatroom[]
  messages   Message[]
  dailyUsage DailyUsage[]
}

model Subscription {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  stripeCustomerId String
  stripeSubId      String
  status           String
  subscriptionType SubscriptionTier  @default(basic)
  startedAt        DateTime
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
}

model Chatroom {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  userId    Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id         Int         @id @default(autoincrement())
  chatroomId Int
  userId     Int
  role       MessageRole
  content    String      @db.Text
  timestamp  DateTime    @default(now()) @db.Timestamptz(6)

  chatroom Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyUsage {
  userId      Int
  usageDate   DateTime @db.Date
  promptCount Int      @default(0)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, usageDate])
}

enum SubscriptionTier {
  basic
  pro
}

enum MessageRole {
  user
  ai
}

enum status {
  active
  inactive
}
